void deo(char data, char device);
void deo2(int data, char device);
char dei(char device);
int dei2(char device);
int __builtin_va_arg();
typedef void *va_list;
void exit(char status);
typedef struct {
    char operation;
    int length;
    int src_page;
    void* src_addr;
    int dst_page;
    void* dst_addr;
} Expansion;
typedef struct {
  int x;
  int y;
} Paddle;
Paddle left;
Paddle right;
struct {
  int x;
  int y;
  int speed_x;
  int speed_y;
} ball;
char tile_background[8] = {0x11, 0x22, 0x44, 0x88, 0x11, 0x22, 0x44, 0x88};
char paddle_sprite[3][2][2][8] = {
    {{{0x3f, 0x7f, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
      {0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c}},
     {{0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06}}},
    {{{0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff},
      {0x3c, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00}},
     {{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
      {0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06}}},
    {{{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
     {{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc},
      {0x06, 0x06, 0x06, 0x06, 0x06, 0x1e, 0x3c, 0x00}}},
};
char ball_sprite[2][2][2][8] = {
    {{{0x03, 0x0f, 0x1f, 0x39, 0x70, 0x70, 0xf9, 0xff},
      {0x00, 0x00, 0x00, 0x06, 0x0f, 0x0f, 0x06, 0x00}},
     {{0xc0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff},
      {0x00, 0x00, 0x00, 0x00, 0x08, 0x0c, 0x06, 0x06}}},
    {{{0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x03},
      {0x00, 0x00, 0x00, 0x00, 0x18, 0x0f, 0x01, 0x00}},
     {{0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xc0},
      {0x06, 0x06, 0x0c, 0x1c, 0x38, 0xf0, 0xc0, 0x00}}},
};
void draw_background(void) {
  deo2(tile_background, 0x2c);
  int max_y = dei2(0x24) - 16;
  int max_x = dei2(0x22);
  for (int y = 16; y < max_y; y += 8) {
    for (int x = 0; x < max_x; x += 8) {
      (deo2(x, 0x28), deo2(y, 0x2a));
      deo(3, 0x2f);
    }
  }
}
void reset(void) {
  ball.x = (dei2(0x22) - 16) / 2;
  ball.y = (dei2(0x24) - 16) / 2;
}
void update_ball(void) {
  ball.x += ball.speed_x;
  ball.y += ball.speed_y;
  if (ball.y < 16)
    ball.speed_y = 1;
  else if (ball.y + 16 > dei2(0x24) - 16)
    ball.speed_y = (-1);
  if (ball.x < 0x10 + 16) {
    if (ball.y > left.y - 16 && ball.y < left.y + 24) {
      ball.speed_x = 1;
    } else if (ball.x <= 0) {
      reset();
    }
  }
  else if (ball.x + 16 > dei2(0x22) - 0x10 - 16) {
    if (ball.y > right.y - 16 && ball.y < right.y + 24) {
      ball.speed_x = (-1);
    } else if (ball.x >= dei2(0x22)) {
      reset();
    }
  }
}
void update_paddles(void) {
  char button = dei(0x82);
  if (button & 0x10)
    left.y -= 1;
  if (button & 0x20)
    left.y += 1;
  if (button & 0x01)
    right.y -= 1;
  if (button & 0x02)
    right.y += 1;
}
void draw_ball(char color) {
  (deo2(ball.x, 0x28), deo2(ball.y, 0x2a));
  deo2(ball_sprite, 0x2c);
  deo(0x16, 0x26);
  deo(color, 0x2f);
  deo(color, 0x2f);
}
void draw_paddle(int x, int y, char color) {
  (deo2(x, 0x28), deo2(y, 0x2a));
  deo2(paddle_sprite, 0x2c);
  deo(0x16, 0x26);
  deo(color, 0x2f);
  deo(color, 0x2f);
  deo(color, 0x2f);
}
void on_screen(void) {
  draw_paddle(left.x, left.y, 0x40);
  draw_paddle(right.x, right.y, 0x40);
  draw_ball(0x40);
  update_paddles();
  update_ball();
  draw_paddle(left.x, left.y, (0xc0 | 5));
  draw_paddle(right.x, right.y, (0xc0 | 5));
  draw_ball((0xc0 | 5));
}
void main(void) {
  (deo2(0x2ce9, 0x08), deo2(0x01c0, 0x0a), deo2(0x2ce5, 0x0c));
  draw_background();
  left.x = 0x10;
  right.x = dei2(0x22) - 0x10 - 16;
  left.y = right.y = (dei2(0x24) - 24) / 2;
  reset();
  ball.speed_x = (-1);
  ball.speed_y = 1;
}
